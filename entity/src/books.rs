//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.4

use super::sea_orm_active_enums::Genre;
use async_graphql::*;
use sea_orm::entity::prelude::*;
use sea_orm::DeleteMany;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, SimpleObject)]
#[sea_orm(table_name = "books")]
#[graphql(concrete(name = "Book", params()))]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub author_id: i32,
    pub title: String,
    pub book_path: String,
    pub rating: i32,
    #[sea_orm(column_type = "Text")]
    pub short_view: String,
    pub genre: Genre,
    pub created_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::authors::Entity",
        from = "Column::AuthorId",
        to = "super::authors::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Authors,
    #[sea_orm(has_many = "super::pages::Entity")]
    Pages,
    #[sea_orm(has_many = "super::reads::Entity")]
    Reads,
}

impl Related<super::authors::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Authors.def()
    }
}

impl Related<super::pages::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Pages.def()
    }
}

impl Related<super::reads::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Reads.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

impl Entity {
    pub fn find_by_id(id: i32) -> Select<Entity> {
        Self::find().filter(Column::Id.eq(id))
    }

    pub fn find_by_title(title: &str) -> Select<Entity> {
        Self::find().filter(Column::Title.eq(title))
    }

    pub fn delete_by_id(id: i32) -> DeleteMany<Entity> {
        Self::delete_many().filter(Column::Id.eq(id))
    }
}
