//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.4

use crate::books;
use async_graphql::*;
use sea_orm::entity::prelude::*;
use sea_orm::{DeleteMany, QuerySelect};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, SimpleObject)]
#[sea_orm(table_name = "reads")]
#[graphql(concrete(name = "Reads", params()))]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub book_id: i32,
    pub user_id: i32,
    pub page: i32,
    pub symbol: i32,
    pub amount_to_send: i32,
    pub send_timeout: i32,
    pub time_to_send: Time,
    pub finished: bool,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::books::Entity",
        from = "Column::BookId",
        to = "super::books::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Books,
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::UserId",
        to = "super::users::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Users,
}

impl Related<super::books::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Books.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

impl Entity {
    pub fn find_by_id(id: i32) -> Select<Entity> {
        Self::find().filter(Column::Id.eq(id))
    }

    pub fn find_by_user(id: i32) -> Select<Entity> {
        Self::find().filter(Column::UserId.eq(id))
    }

    pub fn find_by_user_and_book(user_id: i32, book_id: i32) -> Select<Entity> {
        Self::find()
            .filter(Column::UserId.eq(user_id))
            .filter(Column::BookId.eq(book_id))
    }

    pub fn delete_by_id(id: i32) -> DeleteMany<Entity> {
        Self::delete_many().filter(Column::Id.eq(id))
    }
}
