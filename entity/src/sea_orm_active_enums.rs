//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.4

use async_graphql::Enum;
use sea_orm::entity::prelude::*;
use std::str::FromStr;

#[derive(Debug, Copy, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum, Enum)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "genre")]
pub enum Genre {
    #[sea_orm(string_value = "biology")]
    Biology,
    #[sea_orm(string_value = "fiction")]
    Fiction,
    #[sea_orm(string_value = "it")]
    It,
    #[sea_orm(string_value = "non_fiction")]
    NonFiction,
}

impl FromStr for Genre {
    type Err = anyhow::Error;

    fn from_str(input: &str) -> Result<Genre, Self::Err> {
        match input {
            "biology" => Ok(Genre::Biology),
            "fiction" => Ok(Genre::Fiction),
            "it" => Ok(Genre::It),
            "nonfiction" => Ok(Genre::NonFiction),
            _ => Err(anyhow::anyhow!("Cannot parse incoming genre")),
        }
    }
}
